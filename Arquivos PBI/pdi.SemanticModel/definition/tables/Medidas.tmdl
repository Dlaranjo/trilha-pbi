table Medidas
	lineageTag: cc91e4e4-47e7-4494-a47b-659fe74e612f

	measure Tags = ```
			
			VAR Stage = SELECTEDVALUE(fMain[Country])
			VAR Width = (LEN(Stage) * 8) + 20 // Calcula largura com margem extra
			VAR Colour = SWITCH ( Stage,
			                "Brazil", "Maroon",
			                "USA", "Orange",
			                "India", "Navy",
			                "Japan", "Grey",
			                "UK", "Blue",
			                "Australia", "Purple")
			VAR Box = "<rect id='track' x='0' y='3' rx='8' ry='8' width='"&Width&"' height='15' fill='"&Colour&"' stroke='#D0D0D0' stroke-width='0'></rect>"
			VAR Callout = "<text x='" & Width / 2 & "' y='13' fill='white' font-size='10' font-weight='bold' font-family='Segoe UI, sans-serif' text-anchor='middle'>"&Stage&"</text>"
			
			Return
			IF(HASONEVALUE(fMain[Country]),
			"data:image/svg+xml;utf8," & 
			"<svg width='" & Width + 10 & "' height='25' viewBox='-2 -2 " & Width + 10 & " 18' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' display= 'block' overflow='visible'>"
			& Box & Callout &
			"</svg>"
			, BLANK())
			
			```
		displayFolder: Svg\Table
		lineageTag: 7fd33f36-e04c-4bc6-94b7-90da603403a4
		dataCategory: ImageUrl

	measure Grafico = ```
			
			// developed by Kerry Kolosko
			VAR topLineColour = "%238447ff"
			VAR bottomLineColour = "%238332ac"
			
			// "Date" field used in this example along the X axis
			VAR XMinDate = MIN(dCalendario[Data])
			VAR XMaxDate = MAX(dCalendario[Data])
			
			// Obtain overall min and overall max measure values when evaluated for each date
			VAR YMinValue = MINX(Values(dCalendario[AnoMes]),CALCULATE([Kpi 0]))
			VAR YMaxValue = MAXX(Values(dCalendario[AnoMes]),CALCULATE([Kpi 0]))
			
			// Build table of X & Y coordinates and fit to 50 x 150 viewbox
			VAR SparklineTable = ADDCOLUMNS(
			    SUMMARIZE('dCalendario',dCalendario[AnoMes]),
			        "X",INT(150 * DIVIDE(dCalendario[AnoMes] - XMinDate, XMaxDate - XMinDate)),
			        "Y",INT(50 * DIVIDE([Kpi 0] - YMinValue,YMaxValue - YMinValue)))
			
			// Concatenate X & Y coordinates to build the sparkline
			VAR Lines = CONCATENATEX(SparklineTable,[X] & "," & 50-[Y]," ", dCalendario[AnoMes])
			
			// Y-Intersect to divide line colour
			VAR lineIntersection = AVERAGEX(Values(dCalendario[Data]),CALCULATE([Kpi 0]))
			VAR intersectScaled = INT(50 * DIVIDE(lineIntersection - YMinValue,YMaxValue - YMinValue))
			
			VAR Defs = 
			"<defs>
			    <clipPath id='cut-bottom'>
			      <rect x='0' y='0' width='150' height='" & intersectScaled & "' />
			    </clipPath>
			
			    <marker id='circle' markerWidth='4' markerHeight='4' refX='2' refY='2' >
			      <circle cx='2' cy='2' r='1' fill='black' />
			    </marker>
			
			    <marker id='circleLarge' markerWidth='4' markerHeight='4' refX='2' refY='2' >
			      <circle cx='2' cy='2' r='1.25' fill='white' stroke='black' />
			    </marker>
			
			    <marker id='arrow' markerWidth='3' markerHeight='3' refX='2' refY='2' orient='auto' >
			      <path d='M 0 0 L 10 5 L 0 10 z' fill='black' />
			    </marker>
			</defs>"
			
			
			// Add to SVG, and verify Data Category is set to Image URL for this measure (for non-table visuals remove IF HASONEVALUE)
			VAR SVGImageURL = 
			    "data:image/svg+xml;utf8," & 
			    "<svg xmlns='http://www.w3.org/2000/svg' x='0px' y='0px' viewBox='-5 -5 160 60' >" & Defs &
			    "<polyline fill='none' stroke='" & bottomLineColour & "' stroke-width='3' points='" & Lines & "' stroke-linecap='round' stroke-linejoin='round' marker-start='url(#circle)' marker-mid='url(#circle)' marker-end='url(#circleLarge)' />" &
			    "<polyline fill='none' stroke='" & topLineColour & "' stroke-width='3' points='" & Lines & "' stroke-linecap='round' stroke-linejoin='round' clip-path='url(#cut-bottom)' marker-start='url(#circle)' marker-mid='url(#circle)' marker-end='url(#circleLarge)' />" &
			    "<line x1='0' y1='" & intersectScaled & "' x2='150' y2='" & intersectScaled & "' stroke ='grey' stroke-width ='2' stroke-dasharray='5,5' />" &
			    "</svg>"
			
			RETURN SVGImageURL
			```
		displayFolder: Svg\Table
		lineageTag: 77a93075-6557-49ed-bff0-523c106484f0
		dataCategory: ImageUrl

	measure Medidor =
			
			VAR MAXValue = SUM(fMain[Minutes Streamed Per Day])*(1+RAND()) // enter value or measure
			VAR CounterValue = SUM(fMain[Minutes Streamed Per Day]) // enter value or measure
			VAR AXISRANGE = MAXX(
			    {
			        MAXValue,
			        CounterValue
			    },
			    [Value]
			)
			VAR TRACKWIDTH = MAXValue/AXISRANGE*100
			VAR PERCENTAGEFILL = CounterValue/AXISRANGE
			
			RETURN
			"data:image/svg+xml;charset=utf-8, <svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width= '100' height= '50' display= 'block' viewBox='-5 -5 110 80' overflow='visible'>
			      <path id='track' fill='none' stroke='black' stroke-opacity='1' d='M10,55 a45,45 0 1 1 90,0' stroke-width='6' transform='(0 -10)' />
			      <path id='track' fill='none' stroke='lightgrey' stroke-opacity='0.1' d='M10,55 a45,45 0 1 1 90,0' stroke-width='20' />
			      <path id='fill' fill='none' stroke-opacity='0.3' stroke="&IF(PERCENTAGEFILL<0.50,"'#e62c29'",IF(PERCENTAGEFILL<0.65,"'#F4E40E'","'blue'"))&" d='M10,55 a45,45 0 1 1 90,0' stroke-width='20' stroke-dasharray='141.3717' stroke-dashoffset="&"'"&(1-PERCENTAGEFILL) * (PI()*45)&"'"&"></path>
			      <path id='counter' fill='black' stroke='white' d='M0,55 L0,55' stroke-width='5' transform='rotate("&PERCENTAGEFILL*180&" 55 55)'/>
			      <path id='counter' fill='black' stroke='black' d='M0,55 L0,55' stroke-width='3' transform='rotate("&PERCENTAGEFILL*180&" 55 55)'/>
			      <text x='40' y='55' font-family='Segoe UI' font-size='20' font-weight='bold' >"&FORMAT(PERCENTAGEFILL, "0%")&"</text>
			    </svg>" //Target Marker = Percent of Total * 180 degrees; Gauge Fill = Percent of Total * πr
		displayFolder: Svg\Table
		lineageTag: e3b4a3f6-e564-4be3-9c1b-77482847c3a3
		dataCategory: ImageUrl

	measure 'Kpi 0' = SUM(fMain[Minutes Streamed Per Day]) * (RAND() + 0.5)
		formatString: 0
		displayFolder: Kpis
		lineageTag: d930b3d1-da93-4f1e-9249-f2faebfd357f

	measure 'SVG Anim Shake' = ```
			
			
			var vel = 10 - SELECTEDVALUE('pVelocidade'[Parâmetro])
			
			return
			SWITCH(
			    SELECTEDVALUE(dAnim[Animations]),
			    "Wobble",
			    "
			    
			.icon {
			    animation: wobble-hor-bottom 0."& vel & "s infinite both;
			    transform-origin: center; /* Define o ponto de rotação como o centro do próprio path */
			    transform-box: fill-box; /* Faz com que o centro seja relativo ao próprio path */
			}
			
			@keyframes wobble-hor-bottom {
			  0%,
			  100% {
			    transform: translateX(0%);
			  }
			  15% {
			    transform: translateX(-3px) rotate(-6deg);
			  }
			  30% {
			    transform: translateX(1.5px) rotate(6deg);
			  }
			  45% {
			    transform: translateX(-1.5px) rotate(-3.6deg);
			  }
			  60% {
			    transform: translateX(1px) rotate(2.4deg);
			  }
			  75% {
			    transform: translateX(-0.6px) rotate(-1.2deg);
			  }
			}
			    ", "Shake", 
			    "
			.icon {
			    animation: shake-horizontal "& vel & "s cubic-bezier(0.455, 0.030, 0.515, 0.955) both infinite;
			    transform-origin: center; /* Define o ponto de rotação como o centro do próprio path */
			    transform-box: fill-box; /* Faz com que o centro seja relativo ao próprio path */
			}
			
			
			@keyframes shake-horizontal {
			  0%,
			  100% {
			    transform: translateX(0);
			  }
			  10%,
			  30%,
			  50%,
			  70% {
			    transform: translateX(-3px);
			  }
			  20%,
			  40%,
			  60% {
			    transform: translateX(3px);
			  }
			  80% {
			    transform: translateX(2px);
			  }
			  90% {
			    transform: translateX(-2px);
			  }
			}
			", "Dance",
			"
			.icon {
			    animation: vibrate-1 0."& vel & "s linear infinite both;
			    transform-origin: center; /* Define o ponto de rotação como o centro do próprio path */
			    transform-box: fill-box; /* Faz com que o centro seja relativo ao próprio path */
			}
			
			@keyframes vibrate-1 {
			  0% {
			    transform: translate(0);
			  }
			  20% {
			    transform: translate(-2px, 2px) rotate(-6deg);
			  }
			  40% {
			    transform: translate(-2px, -2px) rotate(6deg);;
			  }
			  60% {
			    transform: translate(2px, 2px) rotate(-3.6deg);
			  }
			  80% {
			    transform: translate(2px, -2px) rotate(2.4deg);
			  }
			  100% {
			    transform: translate(0) rotate(-1.2deg);
			  }
			}
			", ""
			)
			```
		displayFolder: Svg\Music Icon
		lineageTag: e0a41372-d111-4763-b2cc-585277778f55

	measure 'SVG Music Icon' =
			
			"data:image/svg+xml;utf8, <svg width='61' height='61' viewBox='0 0 61 61' fill='none' xmlns='http://www.w3.org/2000/svg'>
			<path class='icon' fill-rule='evenodd' clip-rule='evenodd' d='M32.3535 32.0552V48.2868H32.2581C32.3209 48.6939 32.3535 49.111 32.3535 49.5358C32.3535 54.023 28.7158 57.6608 24.2285 57.6608C19.7412 57.6608 16.1035 54.023 16.1035 49.5358C16.1035 45.0485 19.7412 41.4108 24.2285 41.4108C25.8393 41.4108 27.3406 41.8795 28.6035 42.6881V30.8296C28.6028 30.8007 28.6029 30.7719 28.6035 30.7431V22.9055L28.6035 22.8098C28.6035 21.2791 28.6034 19.9824 28.7193 18.9162C28.8423 17.7824 29.1103 16.738 29.755 15.7689C30.4 14.7998 31.26 14.1495 32.2585 13.5981C33.197 13.0798 34.3928 12.5794 35.8043 11.9887L35.8938 11.9512L40.8938 9.85851L41.0374 9.79838C44.0483 8.53805 46.5037 7.51023 48.4843 7.00556C50.5318 6.48378 52.5195 6.39963 54.2875 7.57633C56.0555 8.75301 56.7453 10.619 57.0545 12.7092C57.3537 14.7302 57.3536 17.3909 57.3535 20.6534V20.7422C57.3542 20.7709 57.3542 20.7996 57.3535 20.8281V43.6713H57.3081C57.3381 43.9553 57.3535 44.2438 57.3535 44.5358C57.3535 49.023 53.7158 52.6608 49.2285 52.6608C44.7412 52.6608 41.1035 49.023 41.1035 44.5358C41.1035 40.0485 44.7412 36.4108 49.2285 36.4108C50.8393 36.4108 52.3406 36.8795 53.6035 37.6881V23.5552L32.3535 32.0552ZM32.3535 28.0163L53.6027 19.5166C53.598 16.7454 53.5655 14.7493 53.345 13.258C53.0968 11.5801 52.6715 11.0055 52.2098 10.6982C51.7483 10.3909 51.054 10.2206 49.4103 10.6394C47.731 11.0674 45.5323 11.9822 42.3415 13.3177L37.3415 15.4105C35.816 16.049 34.8105 16.4726 34.0713 16.8808C33.3723 17.2668 33.0695 17.5572 32.877 17.8465C32.6843 18.1359 32.5335 18.5273 32.4473 19.3212C32.356 20.1606 32.3535 21.2516 32.3535 22.9055V28.0163ZM44.8535 44.5358C44.8535 42.1195 46.8123 40.1608 49.2285 40.1608C51.6447 40.1608 53.6035 42.1195 53.6035 44.5358C53.6035 46.952 51.6447 48.9108 49.2285 48.9108C46.8123 48.9108 44.8535 46.952 44.8535 44.5358ZM19.8535 49.5358C19.8535 47.1195 21.8123 45.1608 24.2285 45.1608C26.6447 45.1608 28.6035 47.1195 28.6035 49.5358C28.6035 51.952 26.6447 53.9108 24.2285 53.9108C21.8123 53.9108 19.8535 51.952 19.8535 49.5358Z' fill='#892A0D'/>
			<path class='icon' opacity='0.5' d='M17.9785 28.2858V5.78577C17.9785 10.9634 22.3719 13.2858 25.4785 13.2858M17.9785 27.0358C17.9785 30.4875 15.1803 33.2858 11.7285 33.2858C8.27674 33.2858 5.47852 30.4875 5.47852 27.0358C5.47852 23.584 8.27674 20.7858 11.7285 20.7858C15.1803 20.7858 17.9785 23.584 17.9785 27.0358Z' stroke='#892A0D' stroke-width='3.75' stroke-linecap='round' stroke-linejoin='round'/>
			<style>
			"
			& [SVG Anim Shake] &
			"
			</style>
			</svg>"
		displayFolder: Svg\Music Icon
		lineageTag: e106e700-8326-4e29-af97-cf3732c23428
		dataCategory: ImageUrl

	measure 'Kpi 1' = SUM(fMain[Minutes Streamed Per Day]) * (RAND() + 0.5)
		formatString: 0
		displayFolder: Kpis
		lineageTag: f276c55c-991e-4b13-b61b-e94bcb4a4caf

	measure 'Kpi 2' = SUM(fMain[Minutes Streamed Per Day]) * (RAND() + 0.5)
		displayFolder: Kpis
		lineageTag: be4f95e3-87b3-4de4-a0a7-dcec3dae3ca1

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Kpi 3' = SUM(fMain[Minutes Streamed Per Day]) * (RAND() + 0.5)
		displayFolder: Kpis
		lineageTag: 924ce21d-f086-439b-9b22-bda9f63e5c31

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	partition Medidas = m
		mode: import
		source =
				let
				    Fonte = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("i44FAA==", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#"Coluna 1" = _t]),
				    #"Tipo Alterado" = Table.TransformColumnTypes(Fonte,{{"Coluna 1", type text}}),
				    #"Colunas Removidas" = Table.RemoveColumns(#"Tipo Alterado",{"Coluna 1"})
				in
				    #"Colunas Removidas"

	annotation PBI_ResultType = Table

